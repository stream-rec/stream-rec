name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'dev'
    tags:
      - 'v*'

env:
  REGISTRY_IMAGE: streamrec/stream-rec

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ amd64, arm64, alpine ]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-24.04-arm
          - platform: alpine
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Apply Alpine patch
        if: matrix.platform == 'alpine'
        run: |
          git apply ci/build(dockerfile)__use_alpines_image.patch
          echo "Applied Alpine patch to Dockerfile"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=raw,value=latest,priority=700,enable={{is_default_branch}}
            type=raw,value=main-alpine,priority=700,enable={{and is_default_branch (match "^alpine$" matrix.platform)}}
            type=ref,enable=true,priority=600,prefix=,suffix=,event=branch
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform == 'alpine' && 'linux/amd64,linux/arm64' || matrix.platform }}
          # For alpine, we build for both amd64 and arm64, but tag it as main-alpine.
          # For regular amd64/arm64, we build for that specific platform.
          # The manifest merge job will handle creating multi-arch images for 'latest' and other tags.
          # The 'main-alpine' tag will be specific to the patched Dockerfile.
          # We need to ensure the 'main-alpine' tag is only applied to the alpine build.
          # The docker/metadata-action handles the tagging correctly based on the 'enable' condition.
          # The build-push-action will use the tags from metadata.
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          context: .
          file: ./Dockerfile # Explicitly state Dockerfile, though it's default
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=raw,value=latest,priority=700,enable={{is_default_branch}}
            # main-alpine tag is handled by the build job itself, not during merge for multi-arch manifest of 'latest'
            type=ref,enable=true,priority=600,prefix=,suffix=,event=branch
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
            type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}